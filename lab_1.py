import matplotlib
matplotlib.use('TkAgg', force=True)

import matplotlib.pyplot as plt
import numpy as np

#########################################################################################
# Задание 1
#########################################################################################
# 6 = x1, 7 = x2, 8 = x3, 11 = x4, 12 = x5, 13 = x6, 16 = x7, 17 = x8, 18 = x9

c = 0.1
h = 1/4
u_1 = u_5 = u_10 = u_15 = u_2 = u_3 = u_14 = u_9 = u_19 = u_22 = u_23 = u_21 = u_20 = 0

# Система из 9 уравнений 
# -u_1  - u_11  - u_7  - u_5  + 4*u_6  + c*u_6*h**2  = h**2         # Узел 6
# -u_2  - u_12  - u_8  - u_6  + 4*u_7  + c*u_7*h**2  = h**2         # Узел 7
# -u_3  - u_13  - u_9  - u_7  + 4*u_8  + c*u_8*h**2  = h**2         # Узел 8
# -u_6  - u_16  - u_12 - u_10 + 4*u_11 + c*u_11*h**2 = h**2         # Узел 11
# -u_7  - u_13  - u_17 - u_11 + 4*u_12 + c*u_12*h**2 = h**2         # Узел 12
# -u_8  - u_12  - u_18 - u_14 + 4*u_13 + c*u_13*h**2 = h**2         # Узел 13
# -u_11 - u_15  - u_21 - u_17 + 4*u_16 + c*u_16*h**2 = h**2         # Узел 16
# -u_12 - u_18  - u_16 - u_22 + 4*u_17 + c*u_17*h**2 = h**2         # Узел 17
# -u_13 - u_17  - u_19 - u_23 + 4*u_18 + c*u_18*h**2 = h**2         # Узел 18

# Составим матрицу по системе уравнений
A = np.array([[4 + c * h**2, -1, 0, -1, 0, 0, 0, 0, 0],
             [-1, 4 + c * h**2, -1, 0, -1, 0, 0, 0, 0],
             [0, -1, 4 + c * h**2, 0, 0, -1, 0, 0, 0],
             [-1, 0, 0, 4 + c * h**2, -1, 0, -1, 0, 0],
             [0, -1, 0, -1, 4 + c * h**2, -1, 0, -1, 0],
             [0, 0, -1, 0, -1, 4 + c * h**2, 0, 0, -1],
             [0, 0, 0, -1, 0, 0, 4 + c * h**2, -1, 0],
             [0, 0, 0, 0, -1, 0, -1, 4 + c * h**2, -1],
             [0, 0, 0, 0, 0, -1, 0, -1, 4 + c * h**2]])

# Составим столбец правых частей
b = np.array([h**2, h**2, h**2, h**2, h**2, h**2, h**2, h**2, h**2])

# Решение системы уравнений
x = np.linalg.solve(A,b)
print(x)

plt.spy(A)
plt.title("Spy plot of matrix A")
plt.xlabel("Column index")
plt.ylabel("Row index")
plt.show()

#########################################################################################
# Задание 2
#########################################################################################
def generate_matrix(h):
    n = (h + 1)**2
    # n = 5*i + j
    A = [[0 for i in range(n)] for j in range(n)]
    b = [h**2 for i in range(n)]
    print(A, b)

    for i in range(h + 1):
        for j in range(h + 1):
            k = i * (h + 1) + j

            # узел внутри области
            if i > 0 and i < h and j > 0 and j < h:
                A[k][k] = 4
                A[k][k - 1] = - 1
                A[k][k + 1] = - 1
                A[k][k - h - 1] = - 1
                A[k][k + h + 1] = - 1

            # узел на границе области
            else:
                A[k][k] = 4
                if(i == 0):
                    A[k][k - 1] = A[k][k + 1] = 0
                    
                # b[k] = boundary_value(i, j)
    return A, b
# def boundary_value(i, j):
    # вычисление значения на границе

    

# generate_matrix(1/h)